// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Role {
  CUSTOMER
  OWNER
  ADMIN
}

model User {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  clerkId     String   @unique
  email       String   @unique
  name        String?
  imageUrl    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  role        Role     @default(CUSTOMER)
  onboarded   Boolean  @default(false)
  
  // Add more fields as needed for the delivery service
  orders      Order[]
  stores      Store[]
}

model Store {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  logoUrl     String?
  storeType   String
  village     String
  phaseNumber String
  blockNumber String
  lotNumber   String
  isActive    Boolean  @default(true)
  isApproved  Boolean  @default(true)
  userId      String   @db.ObjectId
  user        User     @relation(fields: [userId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  products    Product[]
  orders      Order[]
}

model Order {
  id                   String   @id @default(auto()) @map("_id") @db.ObjectId
  orderNumber          String?  @unique
  userId               String   @db.ObjectId
  user                 User     @relation(fields: [userId], references: [id])
  storeId              String   @db.ObjectId
  store                Store    @relation(fields: [storeId], references: [id])
  customerName         String
  customerEmail        String?
  customerPhone        String?
  customerAddress      String
  status               String   @default("new") // new, accepted, preparing, for_delivery, completed, cancelled, declined
  paymentMethod        String   // cash, card, online
  paymentStatus        String   @default("pending") // pending, paid, failed
  totalAmount          Float
  notes                String?
  estimatedDeliveryTime String?
  completedAt          DateTime?
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  
  items                OrderItem[]
}

model OrderItem {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  orderId     String  @db.ObjectId
  order       Order   @relation(fields: [orderId], references: [id])
  productId   String? @db.ObjectId
  productName String
  quantity    Int
  price       Float
  imageUrl    String?
  createdAt   DateTime @default(now())
}

model Product {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String
  price       Float
  category    String
  stock       Int
  images      String[]
  storeId     String   @db.ObjectId
  store       Store    @relation(fields: [storeId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
